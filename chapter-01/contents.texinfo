@node Introduction
@chapter Introduction

@quotation
The computer is simply an instrument whose music is ideas.
@author Alan Kay
@end quotation

@*

@cuis{} offers the possibility to easily design your own Morphs --
widgets you can interact with and later integrate in your GUI
application. There are three ways to design a custom Morph: an
aggregate of existing Morphs, a design from scratch or a combination
of the two former approaches.

Building a new Morph with an aggregate of existing Morphs is mainly
about laying out together Morphs and let the aggregated Morphs manage
the low level drawings and input event operations. When there is a
need for a custom Morph, this is the path to investigate first; if
there is no way to do so, then consider designing from scratch a
Morph.

Designing from scratch a Morph requires to deal with its appearance
and the handling of the input events; for the former, Cuis offers a
vector graphics anti-aliased canvas, the latter is done with a
mechanism to filter and to handle mouse and keyboard events occurring
in the scope of the custom Morph.

Let's start right away with a design from scratch.

@menu
* A first glimpse::
* Mouse event::
* Keyboard event::
@end menu

@node A first glimpse
@section A first glimpse
It's easy to create custom morphs. Just create a subclass of an
existing morph class. Then implement the @method{drawOn:} method or
add and layout sub morphs.

Let's make an example that draws an ellipse. Making it a subclass of
@class{BoxMorph} gives it an @smalltalk{extent} instance variable
which specifies its width and height.

@smalltalkExample{BoxMorph subclass: #EllipseDemo
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'ArtOfMorph'}

We adjust its default extent@footnote{Observe the backtricks to
improve performance at execution.}:

@smalltalkMethod{defaultExtent,
@return{} `200@@200`}

In our @class{EllipseDemo}, the @smalltalk{extent} represents the
lengths of the ox and oy axis of the ellipse. We use it to draw it
accordingly:

@smalltalkMethod{drawOn: aCanvas,
| radius |
radius := extent / 2.0.
aCanvas fillColor: Color purple do: [
   aCanvas ellipseCenter: radius radius: radius]}
   
Finally, we instruct @cuis{} we want to use the Vector Graphic engine:

@smalltalkMethod{requiresVectorCanvas,
@return{} true}

To display an instance of @class{EllipseDemo}, open a Workspace and
execute @smalltalk{EllipseDemo new openInWorld}.

@figure{Ellipse with axes@comma{} resized to an extent approximatively
equals to 300@@100,ch01-EllipseDemo-Axes,5}

@cuisNote{The drawing always operates in the own morph
coordinates system and we have to ensure our drawing operations remain
in the bond defined by the morph origin, in the top-left corner, and
its bottom-right corner delimited by its @smalltalk{extent} attribute,
a point.}

Before proceeding forward with events, we may want to add semantic to
our protocol with @msg{center} and @msg{semiAxises} messages to use within
the @method{drawOn:} method:

@smalltalkMethod{center,
@return{} extent / 2.0}

@smalltalkMethod{semiAxises,
" the semi minor and major axis of the ellipse"
@return{} extent / 2.0}

@smalltalkMethod{drawOn: aCanvas,
aCanvas fillColor: Color purple do: [
   aCanvas ellipseCenter: self center radius: self semiAxises ]}

@cindex event @subentry mouse
@node Mouse event
@section Mouse event
Let's explore how custom morphs can react to mouse clicks, mouse
hovers, and keystrokes.

@cindex event @subentry mouse @subentry click
@subsection Mouse click
Here is a modification of our previous example whose color toggles
between red and green each time it is clicked.

As we need a color, we first modify our @class{EllipseDemo} to be a subclass of
@class{ColoredBoxMorph}:

@smalltalkExample{ColoredBoxMorph subclass: #EllipseDemo
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'ArtOfMorph'}

Then we initialize it with the red color:

@smalltalkMethod{initialize,
super initialize.
color := Color red}

First, we request we want to handle the mouse click down event:

@smalltalkMethod{handlesMouseDown: aMouseEvent,
"This enables the morph to handle mouse events such as button presses."
@return{} true}

Then at each mouse click, we toggle the @smalltalk{color} attribute
between red and greed:

@smalltalkMethod{mouseButton1Down: aMouseEvent localPosition: aPosition,
color := (color = `Color red`) ifTrue: [`Color green`] ifFalse: [`Color red`].
self redrawNeeded}

Of course we adjust the drawing method to use the @smalltalk{color}
attribute:

@smalltalkMethod{drawOn: aCanvas,
aCanvas fillColor: color do: [
   aCanvas ellipseCenter: self center radius: self semiAxises ]}

To render this, open a Workspace and evaluate @smalltalk{EllipseDemo
new openInWorld}. Click the circle several times to toggle its color.


@cindex event @subentry mouse @subentry hovering
@subsection Mouse hovering

Now let's modify our @class{EllipseDemo} to toggle its color based on
whether the mouse cursor is hovering over it.

This time, we want to handle event when the mouse pointer is hovering
our @class{EllipseMorph}:

@smalltalkMethod{handlesMouseOver: aMouseEvent,
"This enables the morph to handle mouse enter and leave events."
@return{} true}

Of course we remove the @smalltalk{handlesMouseDown:} method, or
alternatively we edit it so it return @smalltalk{false}, to let
@cuis{} handles this event:

@smalltalkMethod{handlesMouseDown: aMouseEvent,
"This enables the morph to handle mouse events such as button presses."
@return{} false}

There are two event handlers associated when handling mouse over: when
entering and when leaving a morph. We edit the methods accordingly to
toggle the morph color:

@smalltalkMethod{mouseEnter: aMouseEvent,
color := `Color green`.
self redrawNeeded}

@smalltalkMethod{mouseLeave: aMouseEvent,
color := `Color red`.
self redrawNeeded}

Create an instance as seen previously, the hover onto and off of the
ellipse to toggle its color.

Observe how the frontier between inside and outside of the ellipse is
a rectangle, this is because our @class{EllipseDemo} is a kind of
@class{BoxMorph} optimised for rectangular shape. To have exact pixel
detection, including shape drawn with holes, our @class{EllipseDemo}
would require to be a direct subclass of @class{PlacedMorph}. In the
process, we will lose the @smalltalk{extent} and @smalltalk{color}
attributes, and we will have to define ones of our own.

@subsection Grow on user request
Now let's combine the mouse hover and mouse click events: at button 1
click, the ellipse shrinks slightly; at button 2 click, it grows
greatly.

To do so we introduce a @smalltalk{shrink} attribute initialized to 0:

@smalltalkMethod{initialize,
super initialize.
color := Color red.
shrink := 0}

Then it changes depending on user actions, its value increase slightly
at button 1 click:

@smalltalkMethod{mouseButton1Down: aMouseEvent localPosition: aPosition,
shrink := (shrink + 0.5) min: (extent x min: extent y) // 2.
self redrawNeeded}

and decrease quickly at button 2 click,

@smalltalkMethod{mouseButton2Down: aMouseEvent localPosition: aPosition,
shrink := (shrink - 5) max: 0.
self redrawNeeded}

Of course we have to bound the @smalltalk{shrink} attribute between 0
and the smaller extent axis of the whole morph.

Then we adjust our @method{semiAxies} method used to draw the ellipse:

@smalltalkMethod{semiAxises,
@return{}  (extent / 2.0) - shrink}

@node Keyboard event
@cindex event @subentry keyboard
@section Keyboard event
So far, we explored how a morph interacts with the mouse pointer, it
may also respond to keyboard events. In this section, we modify our
@class{EllipseDemo} to adjust its color at keyboard interaction.

First, identically to mouse event, we indicate our morph want to
handle keyboard event:

@smalltalkMethod{handlesKeyboard,
"This enables the morph to handle key events if it has focus."
@return{}  self visible}

We handle the keyboard event only when our morph is visible.

@cindex event @subentry keyboard focus
Keyboard event is associated with the concept of keyboard focus. In
the world of morph, one or zero morph own the keyboard focus at a
time, it means this morph will receive the keyboard event.

@cindex preference @subentry keyboard focus
Moreover, in @cuis{} there is this preference
@smalltalk{#focusFollowsMouse}. When true, the keyboard focus is
automatically changed to the morph the mouse pointer is hovering; when
false, the keyboard focus is only changed to a morph at user mouse
click on this specific morph.

To know what is the preference in your @cuis{} system, execute the code:

@smalltalkExample{Preferences at: #focusFollowsMouse
@result{} true}

I personally prefer to explicitly inform the @cuis{} system where the
keyboard focus should go. Indeed, my mouse tends to slip on my desk,
resulting on the keyboard focus to change annoyingly:

@smalltalkExample{Preferences at: #focusFollowsMouse put: false}

Our @class{EllipseDemo} honors this  preference when the mouse pointer
enter the morph:

@smalltalkMethod{mouseEnter: aMouseEvent,
color := `Color green`.
"If the user opted for focus to automatically
move focus to the morph under the cursor then tell
the cursor (event hand) to give focus to this morph."
(Preferences at: #focusFollowsMouse) ifTrue: [aMouseEvent hand newKeyboardFocus: self].
self redrawNeeded}

The @emph{hand} is the mouse pointer object in the @cuis{}
terminology. It manages the keyboard focus and it is informed when the
focus should be affected to another morph.

When the mouse pointer leaves our morph we let its parent morph manages
the focus:

@smalltalkMethod{mouseLeave: aMouseEvent,
super mouseLeave: aMouseEvent.
color := `Color red`.
self redrawNeeded}

again accordingly to the preference:

@smalltalkMethod{Morph>>mouseLeave: evt,
"Handle a mouseLeave event@comma{} meaning the mouse just left my bounds with no button pressed.
Note: a Morph must answer true to #handlesMouseOver: in order to receive this message."
(Preferences at: #focusFollowsMouse) ifTrue: [evt hand releaseKeyboardFocus: self].

"Allow instances to dynamically use properties for handling common events."
self 
   valueOfProperty: #mouseLeave: 
   ifPresentDo: [ :handler | handler value: evt ]}
